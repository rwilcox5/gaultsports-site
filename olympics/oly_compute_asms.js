// Capture the output of this into a variable, if you want
(function(fb, parentModule) {
  var Module = {};
  var args = [];
  Module.arguments = [];
  Module.print = parentModule.print;
  Module.printErr = parentModule.printErr;

  Module.cleanups = [];

  var gb = 0;
  // Each module has its own stack
  var STACKTOP = getMemory(TOTAL_STACK);
  assert(STACKTOP % 8 == 0);
  var STACK_MAX = STACKTOP + TOTAL_STACK;
  Module.cleanups.push(function() {
    parentModule['_free'](STACKTOP); // XXX ensure exported
    parentModule['_free'](gb);
  });

  

// === Auto-generated preamble library stuff ===

//========================================
// Runtime essentials
//========================================

// === Body ===

var ASM_CONSTS = [];





gb = Runtime.alignMemory(getMemory(21024, 8 || 1));

// STATICTOP = STATIC_BASE + 21024;
/* global initializers */  __ATINIT__.push();


/* memory initializer */ allocate([0,0,0,0,1,0,0,0,3,0,0,0,92,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,3,0,0,0,134,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,3,0,0,0,93,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,3,0,0,0,26,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,3,0,0,0,134,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,3,0,0,0,134,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,3,0,0,0,134,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,3,0,0,0,114,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,3,0,0,0,92,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,3,0,0,0,134,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,3,0,0,0,26,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,3,0,0,0,92,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,126,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,29,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,97,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,92,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,92,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,107,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,72,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,31,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,92,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,92,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,26,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,72,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,92,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,31,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,97,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,134,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,97,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,126,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,92,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,107,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,92,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,90,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,93,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,107,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,72,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,92,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,107,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,94,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,117,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,134,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,92,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,92,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,90,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,134,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,117,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,92,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,92,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,106,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,107,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,94,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,92,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,26,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,92,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,107,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,31,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,92,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,94,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,134,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,94,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,92,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,106,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,51,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,101,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,28,0,0,0,1,0,0,0,0,0,0,0,4,0,0,0,21,0,0,0,1,0,0,0,117,0,0,0,1,0,0,0,2,0,0,0,4,0,0,0,21,0,0,0,1,0,0,0,107,0,0,0,1,0,0,0,1,0,0,0,4,0,0,0,21,0,0,0,1,0,0,0,134,0,0,0,1,0,0,0,0,0,0,0,4,0,0,0,21,0,0,0,1,0,0,0,101,0,0,0,1,0,0,0,2,0,0,0,4,0,0,0,21,0,0,0,1,0,0,0,92,0,0,0,1,0,0,0,1,0,0,0,4,0,0,0,21,0,0,0,1,0,0,0,117,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,5,0,0,0,4,0,0,0,93,0,0,0,1,0,0,0,2,0,0,0,1,0,0,0,5,0,0,0,4,0,0,0,92,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,5,0,0,0,4,0,0,0,122,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,4,0,0,0,7,0,0,0,30,0,0,0,1,0,0,0,2,0,0,0,1,0,0,0,4,0,0,0,7,0,0,0,30,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,4,0,0,0,7,0,0,0,92,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,4,0,0,0,7,0,0,0,92,0,0,0,1,0,0,0,2,0,0,0,1,0,0,0,4,0,0,0,7,0,0,0,92,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,4,0,0,0,7,0,0,0,30,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,5,0,0,0,4,0,0,0,80,0,0,0,1,0,0,0,2,0,0,0,1,0,0,0,5,0,0,0,4,0,0,0,92,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,5,0,0,0,4,0,0,0,123,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,4,0,0,0,7,0,0,0,30,0,0,0,1,0,0,0,2,0,0,0,1,0,0,0,4,0,0,0,7,0,0,0,30,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,4,0,0,0,7,0,0,0,30,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,9,0,0,0,4,0,0,0,134,0,0,0,1,0,0,0,2,0,0,0,1,0,0,0,9,0,0,0,4,0,0,0,52,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,9,0,0,0,4,0,0,0,134,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,5,0,0,0,4,0,0,0,127,0,0,0,1,0,0,0,2,0,0,0,1,0,0,0,5,0,0,0,4,0,0,0,94,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,5,0,0,0,4,0,0,0,127,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,4,0,0,0,7,0,0,0,255,255,255,255,1,0,0,0,2,0,0,0,1,0,0,0,4,0,0,0,7,0,0,0,136,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,4,0,0,0,7,0,0,0,163,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,4,0,0,0,7,0,0,0,136,0,0,0,1,0,0,0,2,0,0,0,1,0,0,0,4,0,0,0,7,0,0,0,92,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,4,0,0,0,7,0,0,0,24,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,4,0,0,0,7,0,0,0,30,0,0,0,1,0,0,0,2,0,0,0,1,0,0,0,4,0,0,0,7,0,0,0,163,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,4,0,0,0,7,0,0,0,94,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,4,0,0,0,7,0,0,0,23,0,0,0,1,0,0,0,2,0,0,0,1,0,0,0,4,0,0,0,7,0,0,0,92,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,4,0,0,0,7,0,0,0,163,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,5,0,0,0,4,0,0,0,93,0,0,0,1,0,0,0,2,0,0,0,1,0,0,0,5,0,0,0,4,0,0,0,122,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,5,0,0,0,4,0,0,0,127,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,9,0,0,0,4,0,0,0,31,0,0,0,1,0,0,0,2,0,0,0,1,0,0,0,9,0,0,0,4,0,0,0,134,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,9,0,0,0,4,0,0,0,113,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,4,0,0,0,7,0,0,0,127,0,0,0,1,0,0,0,2,0,0,0,1,0,0,0,4,0,0,0,7,0,0,0,83,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,4,0,0,0,7,0,0,0,127,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,6,0,0,0,5,0,0,0,92,0,0,0,1,0,0,0,2,0,0,0,1,0,0,0,6,0,0,0,5,0,0,0,92,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,6,0,0,0,5,0,0,0,102,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,6,0,0,0,5,0,0,0,29,0,0,0,1,0,0,0,2,0,0,0,1,0,0,0,6,0,0,0,5,0,0,0,49,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,6,0,0,0,5,0,0,0,104,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,6,0,0,0,5,0,0,0,90,0,0,0,1,0,0,0,2,0,0,0,1,0,0,0,6,0,0,0,5,0,0,0,43,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,6,0,0,0,5,0,0,0,107,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,8,0,0,0,7,0,0,0,26,0,0,0,1,0,0,0,2,0,0,0,1,0,0,0,8,0,0,0,7,0,0,0,92,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,8,0,0,0,7,0,0,0,142,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,8,0,0,0,7,0,0,0,97,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,8,0,0,0,7,0,0,0,93,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,6,0,0,0,5,0,0,0,163,0,0,0,1,0,0,0,2,0,0,0,1,0,0,0,6,0,0,0,5,0,0,0,103,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,6,0,0,0,5,0,0,0,27,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,8,0,0,0,7,0,0,0,93,0,0,0,1,0,0,0,2,0,0,0,1,0,0,0,8,0,0,0,7,0,0,0,31,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,8,0,0,0,7,0,0,0,92,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,5,0,0,0,4,0,0,0,128,0,0,0,1,0,0,0,2,0,0,0,1,0,0,0,5,0,0,0,4,0,0,0,127,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,5,0,0,0,4,0,0,0,127,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,6,0,0,0,5,0,0,0,94,0,0,0,1,0,0,0,2,0,0,0,1,0,0,0,6,0,0,0,5,0,0,0,29,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,6,0,0,0,5,0,0,0,29,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,6,0,0,0,5,0,0,0,110,0,0,0,1,0,0,0,2,0,0,0,1,0,0,0,6,0,0,0,5,0,0,0,29,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,6,0,0,0,5,0,0,0,92,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,8,0,0,0,7,0,0,0,92,0,0,0,1,0,0,0,2,0,0,0,1,0,0,0,8,0,0,0,7,0,0,0,92,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,8,0,0,0,7,0,0,0,101,0,0,0,1,0,0,0,0,0,0,0,5,0,0,0,27,0,0,0,1,0,0,0,134,0,0,0,1,0,0,0,2,0,0,0,5,0,0,0,27,0,0,0,1,0,0,0,89,0,0,0,1,0,0,0,1,0,0,0,5,0,0,0,27,0,0,0,1,0,0,0,117,0,0,0,1,0,0,0,0,0,0,0,5,0,0,0,27,0,0,0,1,0,0,0,134,0,0,0,1,0,0,0,1,0,0,0,5,0,0,0,27,0,0,0,1,0,0,0,89,0,0,0,1,0,0,0,0,0,0,0,5,0,0,0,27,0,0,0,1,0,0,0,134,0,0,0,1,0,0,0,2,0,0,0,5,0,0,0,27,0,0,0,1,0,0,0,47,0,0,0,1,0,0,0,1,0,0,0,5,0,0,0,27,0,0,0,1,0,0,0,134,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,10,0,0,0,0,0,0,0,92,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,10,0,0,0,0,0,0,0,100,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,10,0,0,0,0,0,0,0,26,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,20,0,0,0,9,0,0,0,93,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,20,0,0,0,9,0,0,0,101,0,0,0,1,0,0,0,1,0,0,0,3,0,0,0,20,0,0,0,9,0,0,0,150,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,20,0,0,0,9,0,0,0,156,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,20,0,0,0,9,0,0,0,134,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,20,0,0,0,9,0,0,0,132,0,0,0,1,0,0,0,1,0,0,0,3,0,0,0,20,0,0,0,9,0,0,0,26,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,20,0,0,0,9,0,0,0,113,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,20,0,0,0,9,0,0,0,102,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,20,0,0,0,9,0,0,0,35,0,0,0,1,0,0,0,1,0,0,0,3,0,0,0,20,0,0,0,9,0,0,0,26,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,20,0,0,0,9,0,0,0,113,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,20,0,0,0,9,0,0,0,93,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,20,0,0,0,9,0,0,0,113,0,0,0,1,0,0,0,1,0,0,0,3,0,0,0,20,0,0,0,9,0,0,0,102,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,20,0,0,0,9,0,0,0,107,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,20,0,0,0,9,0,0,0,145,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,20,0,0,0,9,0,0,0,117,0,0,0,1,0,0,0,1,0,0,0,3,0,0,0,20,0,0,0,9,0,0,0,143,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,20,0,0,0,9,0,0,0,102,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,20,0,0,0,9,0,0,0,102,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,20,0,0,0,9,0,0,0,145,0,0,0,1,0,0,0,1,0,0,0,3,0,0,0,20,0,0,0,9,0,0,0,101,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,20,0,0,0,9,0,0,0,35,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,20,0,0,0,9,0,0,0,150,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,20,0,0,0,9,0,0,0,93,0,0,0,1,0,0,0,1,0,0,0,3,0,0,0,20,0,0,0,9,0,0,0,145,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,20,0,0,0,9,0,0,0,26,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,20,0,0,0,9,0,0,0,107,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,20,0,0,0,9,0,0,0,106,0,0,0,1,0,0,0,1,0,0,0,3,0,0,0,20,0,0,0,9,0,0,0,151,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,20,0,0,0,9,0,0,0,93,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,20,0,0,0,9,0,0,0,26,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,20,0,0,0,9,0,0,0,150,0,0,0,1,0,0,0,1,0,0,0,3,0,0,0,20,0,0,0,9,0,0,0,106,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,20,0,0,0,9,0,0,0,145,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,20,0,0,0,9,0,0,0,145,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,20,0,0,0,9,0,0,0,101,0,0,0,1,0,0,0,1,0,0,0,3,0,0,0,20,0,0,0,9,0,0,0,156,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,20,0,0,0,9,0,0,0,66,0,0,0,1,0,0,0,0,0,0,0,9,0,0,0,37,0,0,0,2,0,0,0,94,0,0,0,1,0,0,0,2,0,0,0,9,0,0,0,37,0,0,0,2,0,0,0,29,0,0,0,1,0,0,0,1,0,0,0,9,0,0,0,37,0,0,0,2,0,0,0,152,0,0,0,1,0,0,0,0,0,0,0,9,0,0,0,37,0,0,0,2,0,0,0,93,0,0,0,1,0,0,0,2,0,0,0,9,0,0,0,37,0,0,0,2,0,0,0,93,0,0,0,1,0,0,0,1,0,0,0,9,0,0,0,37,0,0,0,2,0,0,0,152,0,0,0,1,0,0,0,0,0,0,0,9,0,0,0,37,0,0,0,2,0,0,0,101,0,0,0,1,0,0,0,2,0,0,0,9,0,0,0,37,0,0,0,2,0,0,0,27,0,0,0,1,0,0,0,1,0,0,0,9,0,0,0,37,0,0,0,2,0,0,0,29,0,0,0,1,0,0,0,0,0,0,0,9,0,0,0,38,0,0,0,7,0,0,0,29,0,0,0,1,0,0,0,2,0,0,0,9,0,0,0,38,0,0,0,7,0,0,0,100,0,0,0,1,0,0,0,1,0,0,0,9,0,0,0,38,0,0,0,7,0,0,0,97,0,0,0,1,0,0,0,0,0,0,0,9,0,0,0,38,0,0,0,7,0,0,0,145,0,0,0,1,0,0,0,2,0,0,0,9,0,0,0,38,0,0,0,7,0,0,0,143,0,0,0,1,0,0,0,1,0,0,0,9,0,0,0,38,0,0,0,7,0,0,0,26,0,0,0,1,0,0,0,0,0,0,0,9,0,0,0,38,0,0,0,7,0,0,0,29,0,0,0,1,0,0,0,2,0,0,0,9,0,0,0,38,0,0,0,7,0,0,0,149,0,0,0,1,0,0,0,1,0,0,0,9,0,0,0,38,0,0,0,7,0,0,0,26,0,0,0,1,0,0,0,0,0,0,0,9,0,0,0,38,0,0,0,7,0,0,0,99,0,0,0,1,0,0,0,2,0,0,0,9,0,0,0,38,0,0,0,7,0,0,0,97,0,0,0,1,0,0,0,1,0,0,0,9,0,0,0,38,0,0,0,7,0,0,0,29,0,0,0,1,0,0,0,0,0,0,0,9,0,0,0,38,0,0,0,7,0,0,0,93,0,0,0,1,0,0,0,2,0,0,0,9,0,0,0,38,0,0,0,7,0,0,0,100,0,0,0,1,0,0,0,1,0,0,0,9,0,0,0,38,0,0,0,7,0,0,0,97,0,0,0,1,0,0,0,0,0,0,0,9,0,0,0,38,0,0,0,7,0,0,0,90,0,0,0,1,0,0,0,2,0,0,0,9,0,0,0,38,0,0,0,7,0,0,0,75,0,0,0,1,0,0,0,1,0,0,0,9,0,0,0,38,0,0,0,7,0,0,0,29,0,0,0,1,0,0,0,0,0,0,0,9,0,0,0,38,0,0,0,7,0,0,0,26,0,0,0,1,0,0,0,2,0,0,0,9,0,0,0,38,0,0,0,7,0,0,0,149,0,0,0,1,0,0,0,1,0,0,0,9,0,0,0,38,0,0,0,7,0,0,0,93,0,0,0,1,0,0,0,0,0,0,0,9,0,0,0,38,0,0,0,7,0,0,0,31,0,0,0,1,0,0,0,2,0,0,0,9,0,0,0,38,0,0,0,7,0,0,0,90,0,0,0,1,0,0,0,1,0,0,0,9,0,0,0,38,0,0,0,7,0,0,0,27,0,0,0,1,0,0,0,0,0,0,0,6,0,0,0,29,0,0,0,8,0,0,0,20,0,0,0,1,0,0,0,2,0,0,0,6,0,0,0,29,0,0,0,8,0,0,0,31,0,0,0,1,0,0,0,1,0,0,0,6,0,0,0,29,0,0,0,8,0,0,0,131,0,0,0,1,0,0,0,0,0,0,0,6,0,0,0,29,0,0,0,8,0,0,0,150,0,0,0,1,0,0,0,2,0,0,0,6,0,0,0,29,0,0,0,8,0,0,0,131,0,0,0,1,0,0,0,1,0,0,0,6,0,0,0,29,0,0,0,8,0,0,0,99,0,0,0,1,0,0,0,0,0,0,0,6,0,0,0,29,0,0,0,8,0,0,0,93,0,0,0,1,0,0,0,2,0,0,0,6,0,0,0,29,0,0,0,8,0,0,0,29,0,0,0,1,0,0,0,1,0,0,0,6,0,0,0,29,0,0,0,8,0,0,0,93,0,0,0,1,0,0,0,0,0,0,0,6,0,0,0,29,0,0,0,8,0,0,0,93,0,0,0,1,0,0,0,2,0,0,0,6,0,0,0,29,0,0,0,8,0,0,0,29,0,0,0,1,0,0,0,1,0,0,0,6,0,0,0,29,0,0,0,8,0,0,0,87,0,0,0,1,0,0,0,0,0,0,0,6,0,0,0,29,0,0,0,8,0,0,0,105,0,0,0,1,0,0,0,0,0,0,0,6,0,0,0,29,0,0,0,8,0,0,0,89,0,0,0,1,0,0,0,2,0,0,0,6,0,0,0,29,0,0,0,8,0,0,0,94,0,0,0,1,0,0,0,1,0,0,0,6,0,0,0,29,0,0,0,8,0,0,0,93,0,0,0,1,0,0,0,0,0,0,0,6,0,0,0,29,0,0,0,8,0,0,0,93,0,0,0,1,0,0,0,2,0,0,0,6,0,0,0,29,0,0,0,8,0,0,0,94,0,0,0,1,0,0,0,1,0,0,0,6,0,0,0,29,0,0,0,8,0,0,0,31,0,0,0,1,0,0,0,0,0,0,0,6,0,0,0,29,0,0,0,8,0,0,0,93,0,0,0,1,0,0,0,2,0,0,0,6,0,0,0,29,0,0,0,8,0,0,0,31,0,0,0,1,0,0,0,1,0,0,0,6,0,0,0,29,0,0,0,8,0,0,0,105,0,0,0,1,0,0,0,0,0,0,0,6,0,0,0,29,0,0,0,8,0,0,0,93,0,0,0,1,0,0,0,2,0,0,0,6,0,0,0,29,0,0,0,8,0,0,0,94,0,0,0,1,0,0,0,1,0,0,0,6,0,0,0,29,0,0,0,8,0,0,0,29,0,0,0,1,0,0,0,0,0,0,0,6,0,0,0,29,0,0,0,8,0,0,0,27,0,0,0,1,0,0,0,2,0,0,0,6,0,0,0,29,0,0,0,8,0,0,0,71,0,0,0,1,0,0,0,1,0,0,0,6,0,0,0,29,0,0,0,8,0,0,0,101,0,0,0,1,0,0,0,0,0,0,0,6,0,0,0,30,0,0,0,4,0,0,0,93,0,0,0,1,0,0,0,2,0,0,0,6,0,0,0,30,0,0,0,4,0,0,0,87,0,0,0,1,0,0,0,0,0,0,0,6,0,0,0,30,0,0,0,4,0,0,0,29,0,0,0,1,0,0,0,2,0,0,0,6,0,0,0,30,0,0,0,4,0,0,0,29,0,0,0,1,0,0,0,2,0,0,0,6,0,0,0,30,0,0,0,4,0,0,0,93,0,0,0,1,0,0,0,1,0,0,0,6,0,0,0,30,0,0,0,4,0,0,0,105,0,0,0,1,0,0,0,0,0,0,0,6,0,0,0,30,0,0,0,4,0,0,0,71,0,0,0,1,0,0,0,2,0,0,0,6,0,0,0,30,0,0,0,4,0,0,0,87,0,0,0,1,0,0,0,1,0,0,0,6,0,0,0,30,0,0,0,4,0,0,0,113,0,0,0,1,0,0,0,0,0,0,0,6,0,0,0,30,0,0,0,4,0,0,0,93,0,0,0,1,0,0,0,2,0,0,0,6,0,0,0,30,0,0,0,4,0,0,0,87,0,0,0,1,0,0,0,1,0,0,0,6,0,0,0,30,0,0,0,4,0,0,0,32,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,18,0,0,0,4,0,0,0,119,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,18,0,0,0,4,0,0,0,99,0,0,0,1,0,0,0,1,0,0,0,3,0,0,0,18,0,0,0,4,0,0,0,117,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,18,0,0,0,4,0,0,0,134,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,18,0,0,0,4,0,0,0,112,0,0,0,1,0,0,0,1,0,0,0,3,0,0,0,18,0,0,0,4,0,0,0,117,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,18,0,0,0,4,0,0,0,101,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,18,0,0,0,4,0,0,0,107,0,0,0,1,0,0,0,1,0,0,0,3,0,0,0,18,0,0,0,4,0,0,0,29,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,18,0,0,0,4,0,0,0,90,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,18,0,0,0,4,0,0,0,101,0,0,0,1,0,0,0,1,0,0,0,3,0,0,0,18,0,0,0,4,0,0,0,26,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,18,0,0,0,4,0,0,0,117,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,18,0,0,0,4,0,0,0,111,0,0,0,1,0,0,0,1,0,0,0,3,0,0,0,18,0,0,0,4,0,0,0,101,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,11,0,0,0,0,0,0,0,114,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,11,0,0,0,0,0,0,0,106,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,11,0,0,0,0,0,0,0,117,0,0,0,1,0,0,0,0,0,0,0,7,0,0,0,31,0,0,0,5,0,0,0,134,0,0,0,1,0,0,0,2,0,0,0,7,0,0,0,31,0,0,0,5,0,0,0,107,0,0,0,1,0,0,0,1,0,0,0,7,0,0,0,31,0,0,0,5,0,0,0,26,0,0,0,1,0,0,0,0,0,0,0,7,0,0,0,31,0,0,0,5,0,0,0,87,0,0,0,1,0,0,0,2,0,0,0,7,0,0,0,31,0,0,0,5,0,0,0,29,0,0,0,1,0,0,0,1,0,0,0,7,0,0,0,31,0,0,0,5,0,0,0,134,0,0,0,1,0,0,0,0,0,0,0,7,0,0,0,33,0,0,0,2,0,0,0,107,0,0,0,1,0,0,0,2,0,0,0,7,0,0,0,33,0,0,0,2,0,0,0,29,0,0,0,1,0,0,0,1,0,0,0,7,0,0,0,33,0,0,0,2,0,0,0,92,0,0,0,1,0,0,0,0,0,0,0,7,0,0,0,31,0,0,0,5,0,0,0,134,0,0,0,1,0,0,0,2,0,0,0,7,0,0,0,31,0,0,0,5,0,0,0,29,0,0,0,1,0,0,0,1,0,0,0,7,0,0,0,31,0,0,0,5,0,0,0,94,0,0,0,1,0,0,0,0,0,0,0,7,0,0,0,31,0,0,0,5,0,0,0,90,0,0,0,1,0,0,0,2,0,0,0,7,0,0,0,31,0,0,0,5,0,0,0,93,0,0,0,1,0,0,0,1,0,0,0,7,0,0,0,31,0,0,0,5,0,0,0,93,0,0,0,1,0,0,0,0,0,0,0,7,0,0,0,31,0,0,0,5,0,0,0,106,0,0,0,1,0,0,0,2,0,0,0,7,0,0,0,31,0,0,0,5,0,0,0,134,0,0,0,1,0,0,0,1,0,0,0,7,0,0,0,31,0,0,0,5,0,0,0,101,0,0,0,1,0,0,0,0,0,0,0,7,0,0,0,32,0,0,0,6,0,0,0,134,0,0,0,1,0,0,0,2,0,0,0,7,0,0,0,32,0,0,0,6,0,0,0,107,0,0,0,1,0,0,0,1,0,0,0,7,0,0,0,32,0,0,0,6,0,0,0,93,0,0,0,1,0,0,0,0,0,0,0,7,0,0,0,31,0,0,0,5,0,0,0,117,0,0,0,1,0,0,0,2,0,0,0,7,0,0,0,31,0,0,0,5,0,0,0,26,0,0,0,1,0,0,0,1,0,0,0,7,0,0,0,31,0,0,0,5,0,0,0,145,0,0,0,1,0,0,0,0,0,0,0,7,0,0,0,34,0,0,0,0,0,0,0,134,0,0,0,1,0,0,0,2,0,0,0,7,0,0,0,34,0,0,0,0,0,0,0,26,0,0,0,1,0,0,0,1,0,0,0,7,0,0,0,34,0,0,0,0,0,0,0,134,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,12,0,0,0,0,0,0,0,94,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,12,0,0,0,0,0,0,0,98,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,12,0,0,0,0,0,0,0,51,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,13,0,0,0,0,0,0,0,29,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,13,0,0,0,0,0,0,0,87,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,13,0,0,0,0,0,0,0,31,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,16,0,0,0,6,0,0,0,26,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,16,0,0,0,6,0,0,0,107,0,0,0,1,0,0,0,1,0,0,0,3,0,0,0,16,0,0,0,6,0,0,0,106,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,16,0,0,0,6,0,0,0,151,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,16,0,0,0,6,0,0,0,94,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,16,0,0,0,6,0,0,0,26,0,0,0,1,0,0,0,1,0,0,0,3,0,0,0,16,0,0,0,6,0,0,0,106,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,16,0,0,0,6,0,0,0,29,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,16,0,0,0,6,0,0,0,154,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,16,0,0,0,6,0,0,0,90,0,0,0,1,0,0,0,1,0,0,0,3,0,0,0,16,0,0,0,6,0,0,0,117,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,16,0,0,0,6,0,0,0,107,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,16,0,0,0,6,0,0,0,26,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,16,0,0,0,6,0,0,0,107,0,0,0,1,0,0,0,1,0,0,0,3,0,0,0,16,0,0,0,6,0,0,0,94,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,16,0,0,0,6,0,0,0,35,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,16,0,0,0,6,0,0,0,117,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,16,0,0,0,6,0,0,0,29,0,0,0,1,0,0,0,1,0,0,0,3,0,0,0,16,0,0,0,6,0,0,0,26,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,16,0,0,0,6,0,0,0,97,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,16,0,0,0,6,0,0,0,117,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,16,0,0,0,6,0,0,0,102,0,0,0,1,0,0,0,1,0,0,0,3,0,0,0,16,0,0,0,6,0,0,0,88,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,16,0,0,0,6,0,0,0,107,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,16,0,0,0,6,0,0,0,26,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,16,0,0,0,6,0,0,0,35,0,0,0,1,0,0,0,1,0,0,0,3,0,0,0,16,0,0,0,6,0,0,0,87,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,16,0,0,0,6,0,0,0,29,0,0,0,1,0,0,0,0,0,0,0,8,0,0,0,35,0,0,0,0,0,0,0,27,0,0,0,1,0,0,0,2,0,0,0,8,0,0,0,35,0,0,0,0,0,0,0,134,0,0,0,1,0,0,0,1,0,0,0,8,0,0,0,35,0,0,0,0,0,0,0,90,0,0,0,1,0,0,0,0,0,0,0,9,0,0,0,39,0,0,0,7,0,0,0,93,0,0,0,1,0,0,0,2,0,0,0,9,0,0,0,39,0,0,0,7,0,0,0,31,0,0,0,1,0,0,0,1,0,0,0,9,0,0,0,39,0,0,0,7,0,0,0,92,0,0,0,1,0,0,0,0,0,0,0,9,0,0,0,39,0,0,0,7,0,0,0,105,0,0,0,1,0,0,0,2,0,0,0,9,0,0,0,39,0,0,0,7,0,0,0,94,0,0,0,1,0,0,0,1,0,0,0,9,0,0,0,39,0,0,0,7,0,0,0,93,0,0,0,1,0,0,0,0,0,0,0,9,0,0,0,39,0,0,0,7,0,0,0,105,0,0,0,1,0,0,0,2,0,0,0,9,0,0,0,39,0,0,0,7,0,0,0,101,0,0,0,1,0,0,0,1,0,0,0,9,0,0,0,39,0,0,0,7,0,0,0,43,0,0,0,1,0,0,0,0,0,0,0,9,0,0,0,39,0,0,0,7,0,0,0,29,0,0,0,1,0,0,0,2,0,0,0,9,0,0,0,39,0,0,0,7,0,0,0,97,0,0,0,1,0,0,0,1,0,0,0,9,0,0,0,39,0,0,0,7,0,0,0,93,0,0,0,1,0,0,0,0,0,0,0,9,0,0,0,39,0,0,0,7,0,0,0,72,0,0,0,1,0,0,0,2,0,0,0,9,0,0,0,39,0,0,0,7,0,0,0,93,0,0,0,1,0,0,0,1,0,0,0,9,0,0,0,39,0,0,0,7,0,0,0,89,0,0,0,1,0,0,0,0,0,0,0,9,0,0,0,39,0,0,0,7,0,0,0,89,0,0,0,1,0,0,0,2,0,0,0,9,0,0,0,39,0,0,0,7,0,0,0,93,0,0,0,1,0,0,0,1,0,0,0,9,0,0,0,39,0,0,0,7,0,0,0,105,0,0,0,1,0,0,0,0,0,0,0,9,0,0,0,39,0,0,0,7,0,0,0,29,0,0,0,1,0,0,0,2,0,0,0,9,0,0,0,39,0,0,0,7,0,0,0,51,0,0,0,1,0,0,0,1,0,0,0,9,0,0,0,39,0,0,0,7,0,0,0,31,0,0,0,1,0,0,0,0,0,0,0,9,0,0,0,39,0,0,0,7,0,0,0,105,0,0,0,1,0,0,0,2,0,0,0,9,0,0,0,39,0,0,0,7,0,0,0,27,0,0,0,1,0,0,0,1,0,0,0,9,0,0,0,39,0,0,0,7,0,0,0,93,0,0,0,1,0,0,0,0,0,0,0,9,0,0,0,40,0,0,0,5,0,0,0,31,0,0,0,1,0,0,0,2,0,0,0,9,0,0,0,40,0,0,0,5,0,0,0,93,0,0,0,1,0,0,0,1,0,0,0,9,0,0,0,40,0,0,0,5,0,0,0,109,0,0,0,1,0,0,0,0,0,0,0,9,0,0,0,40,0,0,0,5,0,0,0,31,0,0,0,1,0,0,0,2,0,0,0,9,0,0,0,40,0,0,0,5,0,0,0,105,0,0,0,1,0,0,0,1,0,0,0,9,0,0,0,40,0,0,0,5,0,0,0,89,0,0,0,1,0,0,0,0,0,0,0,9,0,0,0,40,0,0,0,5,0,0,0,93,0,0,0,1,0,0,0,2,0,0,0,9,0,0,0,40,0,0,0,5,0,0,0,89,0,0,0,1,0,0,0,1,0,0,0,9,0,0,0,40,0,0,0,5,0,0,0,94,0,0,0,1,0,0,0,0,0,0,0,9,0,0,0,40,0,0,0,5,0,0,0,31,0,0,0,1,0,0,0,2,0,0,0,9,0,0,0,40,0,0,0,5,0,0,0,165,0,0,0,1,0,0,0,1,0,0,0,9,0,0,0,40,0,0,0,5,0,0,0,98,0,0,0,1,0,0,0,0,0,0,0,9,0,0,0,40,0,0,0,5,0,0,0,87,0,0,0,1,0,0,0,2,0,0,0,9,0,0,0,40,0,0,0,5,0,0,0,93,0,0,0,1,0,0,0,1,0,0,0,9,0,0,0,40,0,0,0,5,0,0,0,110,0,0,0,1,0,0,0,0,0,0,0,9,0,0,0,40,0,0,0,5,0,0,0,98,0,0,0,1,0,0,0,2,0,0,0,9,0,0,0,40,0,0,0,5,0,0,0,93,0,0,0,1,0,0,0,1,0,0,0,9,0,0,0,40,0,0,0,5,0,0,0,106,0,0,0,1,0,0,0,0,0,0,0,4,0,0,0,22,0,0,0,3,0,0,0,117,0,0,0,1,0,0,0,2,0,0,0,4,0,0,0,22,0,0,0,3,0,0,0,101,0,0,0,1,0,0,0,1,0,0,0,4,0,0,0,22,0,0,0,3,0,0,0,28,0,0,0,1,0,0,0,0,0,0,0,4,0,0,0,23,0,0,0,5,0,0,0,111,0,0,0,1,0,0,0,2,0,0,0,4,0,0,0,23,0,0,0,5,0,0,0,101,0,0,0,1,0,0,0,1,0,0,0,4,0,0,0,23,0,0,0,5,0,0,0,96,0,0,0,1,0,0,0,0,0,0,0,4,0,0,0,22,0,0,0,3,0,0,0,102,0,0,0,1,0,0,0,2,0,0,0,4,0,0,0,22,0,0,0,3,0,0,0,96,0,0,0,1,0,0,0,1,0,0,0,4,0,0,0,22,0,0,0,3,0,0,0,134,0,0,0,1,0,0,0,0,0,0,0,4,0,0,0,22,0,0,0,3,0,0,0,117,0,0,0,1,0,0,0,2,0,0,0,4,0,0,0,22,0,0,0,3,0,0,0,117,0,0,0,1,0,0,0,1,0,0,0,4,0,0,0,22,0,0,0,3,0,0,0,134,0,0,0,1,0,0,0,0,0,0,0,4,0,0,0,23,0,0,0,5,0,0,0,101,0,0,0,1,0,0,0,2,0,0,0,4,0,0,0,23,0,0,0,5,0,0,0,117,0,0,0,1,0,0,0,1,0,0,0,4,0,0,0,23,0,0,0,5,0,0,0,92,0,0,0,1,0,0,0,0,0,0,0,4,0,0,0,23,0,0,0,5,0,0,0,149,0,0,0,1,0,0,0,2,0,0,0,4,0,0,0,23,0,0,0,5,0,0,0,95,0,0,0,1,0,0,0,1,0,0,0,4,0,0,0,23,0,0,0,5,0,0,0,43,0,0,0,1,0,0,0,0,0,0,0,4,0,0,0,25,0,0,0,8,0,0,0,93,0,0,0,1,0,0,0,2,0,0,0,4,0,0,0,25,0,0,0,8,0,0,0,98,0,0,0,1,0,0,0,1,0,0,0,4,0,0,0,25,0,0,0,8,0,0,0,26,0,0,0,1,0,0,0,0,0,0,0,4,0,0,0,24,0,0,0,7,0,0,0,92,0,0,0,1,0,0,0,2,0,0,0,4,0,0,0,24,0,0,0,7,0,0,0,89,0,0,0,1,0,0,0,1,0,0,0,4,0,0,0,24,0,0,0,7,0,0,0,142,0,0,0,1,0,0,0,0,0,0,0,4,0,0,0,25,0,0,0,8,0,0,0,51,0,0,0,1,0,0,0,2,0,0,0,4,0,0,0,25,0,0,0,8,0,0,0,101,0,0,0,1,0,0,0,1,0,0,0,4,0,0,0,25,0,0,0,8,0,0,0,33,0,0,0,1,0,0,0,0,0,0,0,5,0,0,0,28,0,0,0,1,0,0,0,134,0,0,0,1,0,0,0,2,0,0,0,5,0,0,0,28,0,0,0,1,0,0,0,134,0,0,0,1,0,0,0,1,0,0,0,5,0,0,0,28,0,0,0,1,0,0,0,29,0,0,0,1,0,0,0,0,0,0,0,5,0,0,0,28,0,0,0,1,0,0,0,134,0,0,0,1,0,0,0,2,0,0,0,5,0,0,0,28,0,0,0,1,0,0,0,117,0,0,0,1,0,0,0,1,0,0,0,5,0,0,0,28,0,0,0,1,0,0,0,29,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,17,0,0,0,3,0,0,0,100,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,17,0,0,0,3,0,0,0,117,0,0,0,1,0,0,0,1,0,0,0,3,0,0,0,17,0,0,0,3,0,0,0,26,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,17,0,0,0,3,0,0,0,131,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,17,0,0,0,3,0,0,0,101,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,17,0,0,0,3,0,0,0,166,0,0,0,1,0,0,0,1,0,0,0,3,0,0,0,17,0,0,0,3,0,0,0,102,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,17,0,0,0,3,0,0,0,134,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,17,0,0,0,3,0,0,0,115,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,17,0,0,0,3,0,0,0,49,0,0,0,1,0,0,0,1,0,0,0,3,0,0,0,17,0,0,0,3,0,0,0,92,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,17,0,0,0,3,0,0,0,161,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,17,0,0,0,3,0,0,0,109,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,17,0,0,0,3,0,0,0,100,0,0,0,1,0,0,0,1,0,0,0,3,0,0,0,17,0,0,0,3,0,0,0,93,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,17,0,0,0,3,0,0,0,101,0,0,0,1,0,0,0,0,0,0,0,5,0,0,0,26,0,0,0,2,0,0,0,92,0,0,0,1,0,0,0,2,0,0,0,5,0,0,0,26,0,0,0,2,0,0,0,94,0,0,0,1,0,0,0,1,0,0,0,5,0,0,0,26,0,0,0,2,0,0,0,94,0,0,0,1,0,0,0,0,0,0,0,5,0,0,0,26,0,0,0,2,0,0,0,149,0,0,0,1,0,0,0,2,0,0,0,5,0,0,0,26,0,0,0,2,0,0,0,93,0,0,0,1,0,0,0,1,0,0,0,5,0,0,0,26,0,0,0,2,0,0,0,92,0,0,0,1,0,0,0,0,0,0,0,5,0,0,0,26,0,0,0,2,0,0,0,93,0,0,0,1,0,0,0,2,0,0,0,5,0,0,0,26,0,0,0,2,0,0,0,71,0,0,0,1,0,0,0,1,0,0,0,5,0,0,0,26,0,0,0,2,0,0,0,109,0,0,0,1,0,0,0,0,0,0,0,8,0,0,0,36,0,0,0,0,0,0,0,93,0,0,0,1,0,0,0,2,0,0,0,8,0,0,0,36,0,0,0,0,0,0,0,100,0,0,0,1,0,0,0,1,0,0,0,8,0,0,0,36,0,0,0,0,0,0,0,93,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,15,0,0,0,0,0,0,0,29,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,15,0,0,0,0,0,0,0,106,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,15,0,0,0,0,0,0,0,20,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,14,0,0,0,0,0,0,0,26,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,14,0,0,0,0,0,0,0,106,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,14,0,0,0,0,0,0,0,101,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,7,0,0,0,7,0,0,0,49,0,0,0,1,0,0,0,2,0,0,0,1,0,0,0,7,0,0,0,7,0,0,0,49,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,7,0,0,0,7,0,0,0,26,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,7,0,0,0,7,0,0,0,145,0,0,0,1,0,0,0,2,0,0,0,1,0,0,0,7,0,0,0,7,0,0,0,49,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,7,0,0,0,7,0,0,0,110,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,7,0,0,0,7,0,0,0,130,0,0,0,1,0,0,0,2,0,0,0,1,0,0,0,7,0,0,0,7,0,0,0,134,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,7,0,0,0,7,0,0,0,156,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,7,0,0,0,7,0,0,0,130,0,0,0,1,0,0,0,2,0,0,0,1,0,0,0,7,0,0,0,7,0,0,0,131,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,7,0,0,0,7,0,0,0,48,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,7,0,0,0,7,0,0,0,134,0,0,0,1,0,0,0,2,0,0,0,1,0,0,0,7,0,0,0,7,0,0,0,48,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,7,0,0,0,7,0,0,0,111,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,7,0,0,0,7,0,0,0,134,0,0,0,1,0,0,0,2,0,0,0,1,0,0,0,7,0,0,0,7,0,0,0,134,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,7,0,0,0,7,0,0,0,102,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,7,0,0,0,7,0,0,0,110,0,0,0,1,0,0,0,2,0,0,0,1,0,0,0,7,0,0,0,7,0,0,0,49,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,7,0,0,0,7,0,0,0,112,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,7,0,0,0,7,0,0,0,49,0,0,0,1,0,0,0,2,0,0,0,1,0,0,0,7,0,0,0,7,0,0,0,255,255,255,255,1,0,0,0,1,0,0,0,1,0,0,0,7,0,0,0,7,0,0,0,117,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,19,0,0,0,13,0,0,0,151,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,19,0,0,0,13,0,0,0,154,0,0,0,1,0,0,0,1,0,0,0,3,0,0,0,19,0,0,0,13,0,0,0,49,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,19,0,0,0,13,0,0,0,26,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,19,0,0,0,13,0,0,0,26,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,19,0,0,0,13,0,0,0,154,0,0,0,1,0,0,0,1,0,0,0,3,0,0,0,19,0,0,0,13,0,0,0,130,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,19,0,0,0,13,0,0,0,107,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,19,0,0,0,13,0,0,0,156,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,19,0,0,0,13,0,0,0,255,255,255,255,1,0,0,0,1,0,0,0,3,0,0,0,19,0,0,0,13,0,0,0,96,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,19,0,0,0,13,0,0,0,92,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,19,0,0,0,13,0,0,0,107,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,19,0,0,0,13,0,0,0,96,0,0,0,1,0,0,0,1,0,0,0,3,0,0,0,19,0,0,0,13,0,0,0,102,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,19,0,0,0,13,0,0,0,150,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,19,0,0,0,13,0,0,0,92,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,19,0,0,0,13,0,0,0,49,0,0,0,1,0,0,0,1,0,0,0,3,0,0,0,19,0,0,0,13,0,0,0,90,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,19,0,0,0,13,0,0,0,26,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,19,0,0,0,13,0,0,0,156,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,19,0,0,0,13,0,0,0,24,0,0,0,1,0,0,0,1,0,0,0,3,0,0,0,19,0,0,0,13,0,0,0,49,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,19,0,0,0,13,0,0,0,154,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,19,0,0,0,13,0,0,0,92,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,19,0,0,0,13,0,0,0,145,0,0,0,1,0,0,0,1,0,0,0,3,0,0,0,19,0,0,0,13,0,0,0,156,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,19,0,0,0,13,0,0,0,154,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,19,0,0,0,13,0,0,0,102,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,19,0,0,0,13,0,0,0,104,0,0,0,1,0,0,0,1,0,0,0,3,0,0,0,19,0,0,0,13,0,0,0,98,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,19,0,0,0,13,0,0,0,115,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,19,0,0,0,13,0,0,0,49,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,19,0,0,0,13,0,0,0,156,0,0,0,1,0,0,0,1,0,0,0,3,0,0,0,19,0,0,0,13,0,0,0,90,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,19,0,0,0,13,0,0,0,26,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,19,0,0,0,13,0,0,0,49,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,19,0,0,0,13,0,0,0,154,0,0,0,1,0,0,0,1,0,0,0,3,0,0,0,19,0,0,0,13,0,0,0,26,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,19,0,0,0,13,0,0,0,107,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,19,0,0,0,13,0,0,0,117,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,19,0,0,0,13,0,0,0,90,0,0,0,1,0,0,0,1,0,0,0,3,0,0,0,19,0,0,0,13,0,0,0,94,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,19,0,0,0,13,0,0,0,154,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,19,0,0,0,13,0,0,0,26,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,19,0,0,0,13,0,0,0,155,0,0,0,1,0,0,0,1,0,0,0,3,0,0,0,19,0,0,0,13,0,0,0,156,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,19,0,0,0,13,0,0,0,143,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,19,0,0,0,13,0,0,0,26,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,19,0,0,0,13,0,0,0,112,0,0,0,1,0,0,0,1,0,0,0,3,0,0,0,19,0,0,0,13,0,0,0,150,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,19,0,0,0,13,0,0,0,110,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,19,0,0,0,13,0,0,0,49,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,19,0,0,0,13,0,0,0,26,0,0,0,1,0,0,0,1,0,0,0,3,0,0,0,19,0,0,0,13,0,0,0,155,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,19,0,0,0,13,0,0,0,98,0,0,0,1,0,0,0,0,0,0,0,29,2,0,0,167,0,0,0], "i8", ALLOC_NONE, gb);





/* no memory initializer */
// {{PRE_LIBRARY}}

var setTempRet0 = Runtime.setTempRet0, getTempRet0 = Runtime.getTempRet0;



Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };

Module.asmLibraryArg = { "abort": abort, "assert": assert, "enlargeMemory": enlargeMemory, "getTotalMemory": getTotalMemory, "abortOnCannotGrowMemory": abortOnCannotGrowMemory, "abortStackOverflow": abortStackOverflow, "setTempRet0": setTempRet0, "getTempRet0": getTempRet0, "DYNAMICTOP_PTR": DYNAMICTOP_PTR, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "gb": gb, "fb": fb };
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
'almost asm';


  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);

  var DYNAMICTOP_PTR=env.DYNAMICTOP_PTR|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var gb=env.gb|0;
  var fb=env.fb|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntS = 0, tempValue = 0, tempDouble = 0.0;
  var tempRet0 = 0;

  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_max=global.Math.max;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var enlargeMemory=env.enlargeMemory;
  var getTotalMemory=env.getTotalMemory;
  var abortOnCannotGrowMemory=env.abortOnCannotGrowMemory;
  var abortStackOverflow=env.abortStackOverflow;
  var setTempRet0=env.setTempRet0;
  var getTempRet0=env.getTempRet0;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS

function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
  STACKTOP = (STACKTOP + 15)&-16;
  if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(size|0);

  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}
function establishStackSpace(stackBase, stackMax) {
  stackBase = stackBase|0;
  stackMax = stackMax|0;
  STACKTOP = stackBase;
  STACK_MAX = stackMax;
}

function setThrew(threw, value) {
  threw = threw|0;
  value = value|0;
  if ((__THREW__|0) == 0) {
    __THREW__ = threw;
    threwValue = value;
  }
}

function _log2100($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $4 = 1;
 $3 = 0;
 while(1) {
  $6 = $3;
  $7 = ($6|0)<(28);
  if (!($7)) {
   label = 7;
   break;
  }
  $8 = $4;
  $9 = $2;
  $10 = ($8|0)>($9|0);
  if ($10) {
   label = 7;
   break;
  }
  $11 = $4;
  $12 = $2;
  $13 = ($11|0)==($12|0);
  if ($13) {
   label = 5;
   break;
  }
  $16 = $4;
  $17 = $16<<1;
  $4 = $17;
  $18 = $3;
  $19 = (($18) + 1)|0;
  $3 = $19;
 }
 if ((label|0) == 5) {
  $14 = $3;
  $15 = ($14*100)|0;
  $1 = $15;
  $29 = $1;
  STACKTOP = sp;return ($29|0);
 }
 else if ((label|0) == 7) {
  $20 = $2;
  $21 = ($20*200)|0;
  $22 = $4;
  $23 = (($21|0) / ($22|0))&-1;
  $24 = (($23) - 100)|0;
  $5 = $24;
  $25 = $3;
  $26 = ($25*100)|0;
  $27 = $5;
  $28 = (($26) + ($27))|0;
  $1 = $28;
  $29 = $1;
  STACKTOP = sp;return ($29|0);
 }
 return (0)|0;
}
function _pow2($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = 1;
 $2 = 0;
 while(1) {
  $4 = $2;
  $5 = $1;
  $6 = ($4|0)<($5|0);
  $7 = $3;
  if (!($6)) {
   break;
  }
  $8 = $7<<1;
  $3 = $8;
  $9 = $2;
  $10 = (($9) + 1)|0;
  $2 = $10;
 }
 STACKTOP = sp;return ($7|0);
}
function _makeCount($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 $11 = $11|0;
 $12 = $12|0;
 $13 = $13|0;
 $14 = $14|0;
 $15 = $15|0;
 $16 = $16|0;
 $17 = $17|0;
 $18 = $18|0;
 $19 = $19|0;
 $20 = $20|0;
 $21 = $21|0;
 $22 = $22|0;
 $23 = $23|0;
 $24 = $24|0;
 $25 = $25|0;
 $26 = $26|0;
 $27 = $27|0;
 $28 = $28|0;
 $29 = $29|0;
 $30 = $30|0;
 $31 = $31|0;
 $32 = $32|0;
 $33 = $33|0;
 $34 = $34|0;
 $35 = $35|0;
 $36 = $36|0;
 $37 = $37|0;
 $38 = $38|0;
 $39 = $39|0;
 $40 = $40|0;
 $41 = $41|0;
 $42 = $42|0;
 $43 = $43|0;
 $44 = $44|0;
 $45 = $45|0;
 $46 = $46|0;
 $47 = $47|0;
 $48 = $48|0;
 $49 = $49|0;
 $50 = $50|0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0;
 var $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0;
 var $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0;
 var $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0.0, $269 = 0, $270 = 0, $271 = 0.0, $272 = 0.0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0.0, $290 = 0, $291 = 0, $292 = 0.0, $293 = 0.0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $310 = 0.0, $311 = 0, $312 = 0, $313 = 0.0, $314 = 0.0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0;
 var $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $330 = 0, $331 = 0.0, $332 = 0, $333 = 0, $334 = 0.0, $335 = 0.0, $336 = 0, $337 = 0, $338 = 0, $339 = 0;
 var $340 = 0, $341 = 0, $342 = 0.0, $343 = 0.0, $344 = 0, $345 = 0, $346 = 0, $347 = 0.0, $348 = 0, $349 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0.0, $357 = 0, $358 = 0, $359 = 0.0;
 var $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0.0, $368 = 0, $369 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0.0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0;
 var $380 = 0.0, $381 = 0, $382 = 0, $383 = 0, $384 = 0.0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $390 = 0, $391 = 0.0, $392 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 448|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(448|0);
 $105 = sp + 192|0;
 $106 = sp + 28|0;
 $51 = $0;
 $52 = $1;
 $53 = $2;
 $54 = $3;
 $55 = $4;
 $56 = $5;
 $57 = $6;
 $58 = $7;
 $59 = $8;
 $60 = $9;
 $61 = $10;
 $62 = $11;
 $63 = $12;
 $64 = $13;
 $65 = $14;
 $66 = $15;
 $67 = $16;
 $68 = $17;
 $69 = $18;
 $70 = $19;
 $71 = $20;
 $72 = $21;
 $73 = $22;
 $74 = $23;
 $75 = $24;
 $76 = $25;
 $77 = $26;
 $78 = $27;
 $79 = $28;
 $80 = $29;
 $81 = $30;
 $82 = $31;
 $83 = $32;
 $84 = $33;
 $85 = $34;
 $86 = $35;
 $87 = $36;
 $88 = $37;
 $89 = $38;
 $90 = $39;
 $91 = $40;
 $92 = $41;
 $93 = $42;
 $94 = $43;
 $95 = $44;
 $96 = $45;
 $97 = $46;
 $98 = $47;
 $99 = $48;
 $100 = $49;
 $101 = $50;
 $102 = 0;
 $102 = 0;
 while(1) {
  $114 = $102;
  $115 = ($114|0)<(167);
  if (!($115)) {
   break;
  }
  $116 = $102;
  $117 = ((gb + (12992) | 0) + ($116<<3)|0);
  HEAPF64[$117>>3] = 0.0;
  $118 = $102;
  $119 = ((gb + (14328) | 0) + ($118<<3)|0);
  HEAPF64[$119>>3] = 0.0;
  $120 = $102;
  $121 = ((gb + (15664) | 0) + ($120<<3)|0);
  HEAPF64[$121>>3] = 0.0;
  $122 = $102;
  $123 = ((gb + (17000) | 0) + ($122<<3)|0);
  HEAPF64[$123>>3] = 0.0;
  $124 = $102;
  $125 = ((gb + (18344) | 0) + ($124<<3)|0);
  HEAPF64[$125>>3] = 0.0;
  $126 = $102;
  $127 = (($126) + 1)|0;
  $102 = $127;
 }
 $128 = $51;
 HEAP32[$105>>2] = $128;
 $129 = ((($105)) + 4|0);
 $130 = $52;
 HEAP32[$129>>2] = $130;
 $131 = ((($129)) + 4|0);
 $132 = $53;
 HEAP32[$131>>2] = $132;
 $133 = ((($131)) + 4|0);
 $134 = $54;
 HEAP32[$133>>2] = $134;
 $135 = ((($133)) + 4|0);
 $136 = $55;
 HEAP32[$135>>2] = $136;
 $137 = ((($135)) + 4|0);
 $138 = $56;
 HEAP32[$137>>2] = $138;
 $139 = ((($137)) + 4|0);
 $140 = $57;
 HEAP32[$139>>2] = $140;
 $141 = ((($139)) + 4|0);
 $142 = $58;
 HEAP32[$141>>2] = $142;
 $143 = ((($141)) + 4|0);
 $144 = $59;
 HEAP32[$143>>2] = $144;
 $145 = ((($143)) + 4|0);
 $146 = $60;
 HEAP32[$145>>2] = $146;
 $147 = $61;
 HEAP32[$106>>2] = $147;
 $148 = ((($106)) + 4|0);
 $149 = $62;
 HEAP32[$148>>2] = $149;
 $150 = ((($148)) + 4|0);
 $151 = $63;
 HEAP32[$150>>2] = $151;
 $152 = ((($150)) + 4|0);
 $153 = $64;
 HEAP32[$152>>2] = $153;
 $154 = ((($152)) + 4|0);
 $155 = $65;
 HEAP32[$154>>2] = $155;
 $156 = ((($154)) + 4|0);
 $157 = $66;
 HEAP32[$156>>2] = $157;
 $158 = ((($156)) + 4|0);
 $159 = $67;
 HEAP32[$158>>2] = $159;
 $160 = ((($158)) + 4|0);
 $161 = $68;
 HEAP32[$160>>2] = $161;
 $162 = ((($160)) + 4|0);
 $163 = $69;
 HEAP32[$162>>2] = $163;
 $164 = ((($162)) + 4|0);
 $165 = $70;
 HEAP32[$164>>2] = $165;
 $166 = ((($164)) + 4|0);
 $167 = $71;
 HEAP32[$166>>2] = $167;
 $168 = ((($166)) + 4|0);
 $169 = $72;
 HEAP32[$168>>2] = $169;
 $170 = ((($168)) + 4|0);
 $171 = $73;
 HEAP32[$170>>2] = $171;
 $172 = ((($170)) + 4|0);
 $173 = $74;
 HEAP32[$172>>2] = $173;
 $174 = ((($172)) + 4|0);
 $175 = $75;
 HEAP32[$174>>2] = $175;
 $176 = ((($174)) + 4|0);
 $177 = $76;
 HEAP32[$176>>2] = $177;
 $178 = ((($176)) + 4|0);
 $179 = $77;
 HEAP32[$178>>2] = $179;
 $180 = ((($178)) + 4|0);
 $181 = $78;
 HEAP32[$180>>2] = $181;
 $182 = ((($180)) + 4|0);
 $183 = $79;
 HEAP32[$182>>2] = $183;
 $184 = ((($182)) + 4|0);
 $185 = $80;
 HEAP32[$184>>2] = $185;
 $186 = ((($184)) + 4|0);
 $187 = $81;
 HEAP32[$186>>2] = $187;
 $188 = ((($186)) + 4|0);
 $189 = $82;
 HEAP32[$188>>2] = $189;
 $190 = ((($188)) + 4|0);
 $191 = $83;
 HEAP32[$190>>2] = $191;
 $192 = ((($190)) + 4|0);
 $193 = $84;
 HEAP32[$192>>2] = $193;
 $194 = ((($192)) + 4|0);
 $195 = $85;
 HEAP32[$194>>2] = $195;
 $196 = ((($194)) + 4|0);
 $197 = $86;
 HEAP32[$196>>2] = $197;
 $198 = ((($196)) + 4|0);
 $199 = $87;
 HEAP32[$198>>2] = $199;
 $200 = ((($198)) + 4|0);
 $201 = $88;
 HEAP32[$200>>2] = $201;
 $202 = ((($200)) + 4|0);
 $203 = $89;
 HEAP32[$202>>2] = $203;
 $204 = ((($202)) + 4|0);
 $205 = $90;
 HEAP32[$204>>2] = $205;
 $206 = ((($204)) + 4|0);
 $207 = $91;
 HEAP32[$206>>2] = $207;
 $208 = ((($206)) + 4|0);
 $209 = $92;
 HEAP32[$208>>2] = $209;
 $210 = ((($208)) + 4|0);
 $211 = $93;
 HEAP32[$210>>2] = $211;
 $212 = ((($210)) + 4|0);
 $213 = $94;
 HEAP32[$212>>2] = $213;
 $214 = ((($212)) + 4|0);
 $215 = $95;
 HEAP32[$214>>2] = $215;
 $216 = ((($214)) + 4|0);
 $217 = $96;
 HEAP32[$216>>2] = $217;
 $218 = ((($216)) + 4|0);
 $219 = $97;
 HEAP32[$218>>2] = $219;
 $220 = ((($218)) + 4|0);
 $221 = $98;
 HEAP32[$220>>2] = $221;
 $222 = ((($220)) + 4|0);
 $223 = $99;
 HEAP32[$222>>2] = $223;
 $224 = ((($222)) + 4|0);
 $225 = $100;
 HEAP32[$224>>2] = $225;
 $226 = ((($224)) + 4|0);
 $227 = $101;
 HEAP32[$226>>2] = $227;
 $107 = 0;
 $108 = 0;
 $109 = 0;
 $110 = 0;
 $111 = 0;
 $112 = 0;
 $113 = 0;
 $102 = 0;
 while(1) {
  $228 = $102;
  $229 = ($228|0)<(540);
  if (!($229)) {
   break;
  }
  $230 = $102;
  $231 = ($230*6)|0;
  $232 = ((gb + (0) | 0) + ($231<<2)|0);
  $233 = HEAP32[$232>>2]|0;
  $107 = $233;
  $234 = $102;
  $235 = ($234*6)|0;
  $236 = (($235) + 1)|0;
  $237 = ((gb + (0) | 0) + ($236<<2)|0);
  $238 = HEAP32[$237>>2]|0;
  $108 = $238;
  $239 = $102;
  $240 = ($239*6)|0;
  $241 = (($240) + 2)|0;
  $242 = ((gb + (0) | 0) + ($241<<2)|0);
  $243 = HEAP32[$242>>2]|0;
  $244 = (($243) + 1)|0;
  $109 = $244;
  $245 = $102;
  $246 = ($245*6)|0;
  $247 = (($246) + 5)|0;
  $248 = ((gb + (0) | 0) + ($247<<2)|0);
  $249 = HEAP32[$248>>2]|0;
  $250 = (($249) + 1)|0;
  $110 = $250;
  $251 = $102;
  $252 = ($251*6)|0;
  $253 = (($252) + 3)|0;
  $254 = ((gb + (0) | 0) + ($253<<2)|0);
  $255 = HEAP32[$254>>2]|0;
  $111 = $255;
  $256 = $110;
  $257 = $107;
  $258 = (($105) + ($257<<2)|0);
  $259 = HEAP32[$258>>2]|0;
  $260 = Math_imul($256, $259)|0;
  $261 = $108;
  $262 = (($106) + ($261<<2)|0);
  $263 = HEAP32[$262>>2]|0;
  $264 = Math_imul($260, $263)|0;
  $265 = ($264*100)|0;
  $266 = $109;
  $267 = (($265|0) / ($266|0))&-1;
  $268 = (+($267|0));
  $269 = $111;
  $270 = ((gb + (12992) | 0) + ($269<<3)|0);
  $271 = +HEAPF64[$270>>3];
  $272 = $271 + $268;
  HEAPF64[$270>>3] = $272;
  $273 = $102;
  $274 = ($273*6)|0;
  $275 = (($274) + 5)|0;
  $276 = ((gb + (0) | 0) + ($275<<2)|0);
  $277 = HEAP32[$276>>2]|0;
  $278 = ($277|0)==(2);
  if ($278) {
   $279 = $107;
   $280 = (($105) + ($279<<2)|0);
   $281 = HEAP32[$280>>2]|0;
   $282 = $108;
   $283 = (($106) + ($282<<2)|0);
   $284 = HEAP32[$283>>2]|0;
   $285 = Math_imul($281, $284)|0;
   $286 = ($285*100)|0;
   $287 = $109;
   $288 = (($286|0) / ($287|0))&-1;
   $289 = (+($288|0));
   $290 = $111;
   $291 = ((gb + (14328) | 0) + ($290<<3)|0);
   $292 = +HEAPF64[$291>>3];
   $293 = $292 + $289;
   HEAPF64[$291>>3] = $293;
  }
  $294 = $102;
  $295 = ($294*6)|0;
  $296 = (($295) + 5)|0;
  $297 = ((gb + (0) | 0) + ($296<<2)|0);
  $298 = HEAP32[$297>>2]|0;
  $299 = ($298|0)==(1);
  if ($299) {
   $300 = $107;
   $301 = (($105) + ($300<<2)|0);
   $302 = HEAP32[$301>>2]|0;
   $303 = $108;
   $304 = (($106) + ($303<<2)|0);
   $305 = HEAP32[$304>>2]|0;
   $306 = Math_imul($302, $305)|0;
   $307 = ($306*100)|0;
   $308 = $109;
   $309 = (($307|0) / ($308|0))&-1;
   $310 = (+($309|0));
   $311 = $111;
   $312 = ((gb + (15664) | 0) + ($311<<3)|0);
   $313 = +HEAPF64[$312>>3];
   $314 = $313 + $310;
   HEAPF64[$312>>3] = $314;
  }
  $315 = $102;
  $316 = ($315*6)|0;
  $317 = (($316) + 5)|0;
  $318 = ((gb + (0) | 0) + ($317<<2)|0);
  $319 = HEAP32[$318>>2]|0;
  $320 = ($319|0)==(0);
  if ($320) {
   $321 = $107;
   $322 = (($105) + ($321<<2)|0);
   $323 = HEAP32[$322>>2]|0;
   $324 = $108;
   $325 = (($106) + ($324<<2)|0);
   $326 = HEAP32[$325>>2]|0;
   $327 = Math_imul($323, $326)|0;
   $328 = ($327*100)|0;
   $329 = $109;
   $330 = (($328|0) / ($329|0))&-1;
   $331 = (+($330|0));
   $332 = $111;
   $333 = ((gb + (17000) | 0) + ($332<<3)|0);
   $334 = +HEAPF64[$333>>3];
   $335 = $334 + $331;
   HEAPF64[$333>>3] = $335;
  }
  $336 = $102;
  $337 = (($336) + 1)|0;
  $102 = $337;
 }
 $102 = 0;
 while(1) {
  $338 = $102;
  $339 = ($338|0)<(167);
  if (!($339)) {
   break;
  }
  $340 = $102;
  $341 = ((gb + (12992) | 0) + ($340<<3)|0);
  $342 = +HEAPF64[$341>>3];
  $343 = +HEAPF64[(gb + (18336) | 0)>>3];
  $344 = $342 > $343;
  if ($344) {
   $345 = $102;
   $346 = ((gb + (12992) | 0) + ($345<<3)|0);
   $347 = +HEAPF64[$346>>3];
   HEAPF64[(gb + (18336) | 0)>>3] = $347;
  }
  $348 = $102;
  $349 = (($348) + 1)|0;
  $102 = $349;
 }
 $102 = 0;
 while(1) {
  $350 = $102;
  $351 = ($350|0)<(167);
  if (!($351)) {
   break;
  }
  $103 = 0;
  while(1) {
   $352 = $103;
   $353 = ($352|0)<(167);
   if (!($353)) {
    break;
   }
   $354 = $102;
   $355 = ((gb + (12992) | 0) + ($354<<3)|0);
   $356 = +HEAPF64[$355>>3];
   $357 = $103;
   $358 = ((gb + (18344) | 0) + ($357<<3)|0);
   $359 = +HEAPF64[$358>>3];
   $360 = $356 > $359;
   if ($360) {
    label = 23;
    break;
   }
   $387 = $103;
   $388 = (($387) + 1)|0;
   $103 = $388;
  }
  if ((label|0) == 23) {
   label = 0;
   $104 = 166;
   while(1) {
    $361 = $104;
    $362 = $103;
    $363 = ($361|0)>($362|0);
    if (!($363)) {
     break;
    }
    $364 = $104;
    $365 = (($364) - 1)|0;
    $366 = ((gb + (18344) | 0) + ($365<<3)|0);
    $367 = +HEAPF64[$366>>3];
    $368 = $104;
    $369 = ((gb + (18344) | 0) + ($368<<3)|0);
    HEAPF64[$369>>3] = $367;
    $370 = $104;
    $371 = (($370) - 1)|0;
    $372 = ((gb + (19680) | 0) + ($371<<3)|0);
    $373 = +HEAPF64[$372>>3];
    $374 = $104;
    $375 = ((gb + (19680) | 0) + ($374<<3)|0);
    HEAPF64[$375>>3] = $373;
    $376 = $104;
    $377 = (($376) + -1)|0;
    $104 = $377;
   }
   $378 = $102;
   $379 = ((gb + (12992) | 0) + ($378<<3)|0);
   $380 = +HEAPF64[$379>>3];
   $381 = $103;
   $382 = ((gb + (18344) | 0) + ($381<<3)|0);
   HEAPF64[$382>>3] = $380;
   $383 = $102;
   $384 = (+($383|0));
   $385 = $103;
   $386 = ((gb + (19680) | 0) + ($385<<3)|0);
   HEAPF64[$386>>3] = $384;
  }
  $389 = $102;
  $390 = (($389) + 1)|0;
  $102 = $390;
 }
 $391 = +HEAPF64[((((gb + (12992) | 0)) + 80|0))>>3];
 $392 = (~~(($391)));
 STACKTOP = sp;return ($392|0);
}
function _sendColor($0) {
 $0 = $0|0;
 var $1 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0, $27 = 0;
 var $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = 1;
 $5 = +HEAPF64[(gb + (18336) | 0)>>3];
 $6 = $5 / 100.0;
 $7 = (~~(($6)));
 $8 = (_log2100($7)|0);
 $9 = (($8|0) / 100)&-1;
 $4 = $9;
 $10 = $3;
 $11 = ($10|0)==(1);
 $12 = $2;
 $13 = ((gb + (12992) | 0) + ($12<<3)|0);
 $14 = +HEAPF64[$13>>3];
 if ($11) {
  $15 = $4;
  $16 = (_pow2($15)|0);
  $17 = (+($16|0));
  $18 = $14 + $17;
  $19 = (~~(($18)));
  $20 = (_log2100($19)|0);
  $21 = $4;
  $22 = ($21*100)|0;
  $23 = (($20) - ($22))|0;
  $24 = ($23*255)|0;
  $25 = +HEAPF64[(gb + (18336) | 0)>>3];
  $26 = $4;
  $27 = (_pow2($26)|0);
  $28 = (+($27|0));
  $29 = $25 + $28;
  $30 = (~~(($29)));
  $31 = (_log2100($30)|0);
  $32 = $4;
  $33 = ($32*100)|0;
  $34 = (($31) - ($33))|0;
  $35 = (($24|0) / ($34|0))&-1;
  $36 = (+($35|0));
  $1 = $36;
  $40 = $1;
  STACKTOP = sp;return (+$40);
 } else {
  $37 = $14 * 255.0;
  $38 = +HEAPF64[(gb + (18336) | 0)>>3];
  $39 = $37 / $38;
  $1 = $39;
  $40 = $1;
  STACKTOP = sp;return (+$40);
 }
 return +(0.0);
}
function _sendGold($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((gb + (14328) | 0) + ($2<<3)|0);
 $4 = +HEAPF64[$3>>3];
 STACKTOP = sp;return (+$4);
}
function _sendSilver($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((gb + (15664) | 0) + ($2<<3)|0);
 $4 = +HEAPF64[$3>>3];
 STACKTOP = sp;return (+$4);
}
function _sendBronze($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((gb + (17000) | 0) + ($2<<3)|0);
 $4 = +HEAPF64[$3>>3];
 STACKTOP = sp;return (+$4);
}
function _sendValue($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((gb + (12992) | 0) + ($2<<3)|0);
 $4 = +HEAPF64[$3>>3];
 STACKTOP = sp;return (+$4);
}
function _sendRank($0) {
 $0 = $0|0;
 var $1 = 0.0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = 0;
 while(1) {
  $4 = $3;
  $5 = ($4|0)<(167);
  if (!($5)) {
   label = 6;
   break;
  }
  $6 = $3;
  $7 = ((gb + (19680) | 0) + ($6<<3)|0);
  $8 = +HEAPF64[$7>>3];
  $9 = $2;
  $10 = (+($9|0));
  $11 = $8 == $10;
  $12 = $3;
  if ($11) {
   label = 4;
   break;
  }
  $14 = (($12) + 1)|0;
  $3 = $14;
 }
 if ((label|0) == 4) {
  $13 = (+($12|0));
  $1 = $13;
  $15 = $1;
  STACKTOP = sp;return (+$15);
 }
 else if ((label|0) == 6) {
  $1 = -1.0;
  $15 = $1;
  STACKTOP = sp;return (+$15);
 }
 return +(0.0);
}
function runPostSets() {
 var temp = 0;
}

  


// EMSCRIPTEN_END_FUNCS


  return { _sendSilver: _sendSilver, runPostSets: runPostSets, establishStackSpace: establishStackSpace, stackSave: stackSave, stackRestore: stackRestore, _sendGold: _sendGold, _makeCount: _makeCount, _sendColor: _sendColor, setThrew: setThrew, _sendRank: _sendRank, _sendBronze: _sendBronze, _log2100: _log2100, _pow2: _pow2, _sendValue: _sendValue, stackAlloc: stackAlloc };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);

var real__sendSilver = asm["_sendSilver"]; asm["_sendSilver"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__sendSilver.apply(null, arguments);
};

var real__sendGold = asm["_sendGold"]; asm["_sendGold"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__sendGold.apply(null, arguments);
};

var real__makeCount = asm["_makeCount"]; asm["_makeCount"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__makeCount.apply(null, arguments);
};

var real__log2100 = asm["_log2100"]; asm["_log2100"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__log2100.apply(null, arguments);
};

var real_setThrew = asm["setThrew"]; asm["setThrew"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_setThrew.apply(null, arguments);
};

var real__sendValue = asm["_sendValue"]; asm["_sendValue"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__sendValue.apply(null, arguments);
};

var real__sendBronze = asm["_sendBronze"]; asm["_sendBronze"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__sendBronze.apply(null, arguments);
};

var real__sendColor = asm["_sendColor"]; asm["_sendColor"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__sendColor.apply(null, arguments);
};

var real__pow2 = asm["_pow2"]; asm["_pow2"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__pow2.apply(null, arguments);
};

var real__sendRank = asm["_sendRank"]; asm["_sendRank"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__sendRank.apply(null, arguments);
};
var _sendSilver = Module["_sendSilver"] = asm["_sendSilver"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var _sendGold = Module["_sendGold"] = asm["_sendGold"];
var _makeCount = Module["_makeCount"] = asm["_makeCount"];
var _log2100 = Module["_log2100"] = asm["_log2100"];
var setThrew = Module["setThrew"] = asm["setThrew"];
var _sendValue = Module["_sendValue"] = asm["_sendValue"];
var _sendBronze = Module["_sendBronze"] = asm["_sendBronze"];
var _sendColor = Module["_sendColor"] = asm["_sendColor"];
var _pow2 = Module["_pow2"] = asm["_pow2"];
var _sendRank = Module["_sendRank"] = asm["_sendRank"];





var NAMED_GLOBALS = { "silvercount": 15664, "bronzecount": 17000, "ncountries": 12988, "topcountry": 19680, "maxvalue": 18336, "goldcount": 14328, "allcount": 12992, "topcount": 18344, "allmedals": 0, "nmedals": 12984 };
for (var named in NAMED_GLOBALS) {
  Module['_' + named] = gb + NAMED_GLOBALS[named];
}
Module['NAMED_GLOBALS'] = NAMED_GLOBALS;
;

Runtime.registerFunctions([], Module);



// === Auto-generated postamble setup entry stuff ===




__ATPRERUN__.push(runPostSets);

if (runtimeInitialized) {
  // dlopen case: we are being loaded after the system is fully initialized, so just run our prerun and atinit stuff now
  callRuntimeCallbacks(__ATPRERUN__);
  callRuntimeCallbacks(__ATINIT__);
} // otherwise, general dynamic linking case: stuff we added to prerun and init will be executed with the rest of the system as it loads





  // {{MODULE_ADDITIONS}}

  return Module;
});




